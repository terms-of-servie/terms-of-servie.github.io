<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Platformer Adventure</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.min.js"></script>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: 'Arial', sans-serif;
        }
        canvas {
            display: block;
        }
        #ui {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }
        #start-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            z-index: 100;
            pointer-events: auto;
        }
        #game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            z-index: 100;
            pointer-events: auto;
        }
        #score-display {
            position: absolute;
            top: 20px;
            left: 20px;
            color: white;
            font-size: 24px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        #coins-display {
            position: absolute;
            top: 20px;
            right: 20px;
            color: gold;
            font-size: 24px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        #health-bar {
            position: absolute;
            bottom: 20px;
            left: 20px;
            width: 200px;
            height: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 10px;
            overflow: hidden;
        }
        #health-fill {
            height: 100%;
            width: 100%;
            background: linear-gradient(to right, #ff0000, #ffff00, #00ff00);
            transition: width 0.3s;
        }
        .btn {
            background: linear-gradient(135deg, #6e8efb, #a777e3);
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 18px;
            border-radius: 30px;
            cursor: pointer;
            margin-top: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        }
        #instructions {
            position: absolute;
            bottom: 20px;
            right: 20px;
            color: white;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 10px;
            border-radius: 5px;
            font-size: 14px;
        }
        #timer {
            position: absolute;
            top: 60px;
            left: 20px;
            color: white;
            font-size: 24px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
    </style>
</head>
<body class="bg-gray-900">
    <div id="ui">
        <div id="start-screen">
            <h1 class="text-5xl font-bold mb-6 text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-600">3D PLATFORMER ADVENTURE</h1>
            <p class="text-xl mb-8 text-gray-300">Collect coins, avoid obstacles, and reach the goal!</p>
            <button id="start-btn" class="btn">START GAME</button>
            <div class="mt-8 text-gray-400">
                <p class="mb-2">Controls:</p>
                <p>WASD or Arrow Keys to move</p>
                <p>Space to jump</p>
                <p>Mouse to look around</p>
            </div>
        </div>
        
        <div id="game-over">
            <h1 class="text-5xl font-bold mb-6 text-transparent bg-clip-text bg-gradient-to-r from-red-500 to-yellow-500">GAME OVER</h1>
            <p class="text-2xl mb-4">Your Score: <span id="final-score">0</span></p>
            <p class="text-2xl mb-8">Coins Collected: <span id="final-coins">0</span></p>
            <button id="restart-btn" class="btn">PLAY AGAIN</button>
        </div>
        
        <div id="score-display">Score: 0</div>
        <div id="coins-display">Coins: 0</div>
        <div id="timer">Time: 0</div>
        <div id="health-bar">
            <div id="health-fill"></div>
        </div>
        <div id="instructions">
            Collect all coins<br>
            Reach the goal flag
        </div>
    </div>

    <script>
        // Game variables
        let scene, camera, renderer, controls;
        let player, platforms = [], coins = [], obstacles = [];
        let clock, score = 0, coinsCollected = 0, gameTime = 0;
        let playerVelocity = new THREE.Vector3();
        let playerDirection = new THREE.Vector3();
        let moveForward = false, moveBackward = false, moveLeft = false, moveRight = false;
        let canJump = true, gameRunning = false, gameOver = false;
        let playerHealth = 100;
        let goal, goalReached = false;
        
        // UI elements
        const startScreen = document.getElementById('start-screen');
        const gameOverScreen = document.getElementById('game-over');
        const startBtn = document.getElementById('start-btn');
        const restartBtn = document.getElementById('restart-btn');
        const scoreDisplay = document.getElementById('score-display');
        const coinsDisplay = document.getElementById('coins-display');
        const finalScore = document.getElementById('final-score');
        const finalCoins = document.getElementById('final-coins');
        const healthFill = document.getElementById('health-fill');
        const timerDisplay = document.getElementById('timer');
        
        // Initialize the game
        function init() {
            // Create scene
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x87CEEB); // Sky blue
            
            // Create camera
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 5, 10);
            
            // Create renderer
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.shadowMap.enabled = true;
            document.body.appendChild(renderer.domElement);
            
            // Add orbit controls (for mouse look)
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.screenSpacePanning = false;
            controls.minDistance = 5;
            controls.maxDistance = 20;
            controls.maxPolarAngle = Math.PI / 2;
            
            // Add lights
            const ambientLight = new THREE.AmbientLight(0x404040);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(10, 20, 10);
            directionalLight.castShadow = true;
            directionalLight.shadow.mapSize.width = 2048;
            directionalLight.shadow.mapSize.height = 2048;
            scene.add(directionalLight);
            
            // Add ground
            const groundGeometry = new THREE.PlaneGeometry(100, 100);
            const groundMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x3a5f0b,
                roughness: 0.8,
                metalness: 0.2
            });
            const ground = new THREE.Mesh(groundGeometry, groundMaterial);
            ground.rotation.x = -Math.PI / 2;
            ground.receiveShadow = true;
            scene.add(ground);
            
            // Create player
            createPlayer();
            
            // Create platforms
            createPlatforms();
            
            // Create coins
            createCoins();
            
            // Create obstacles
            createObstacles();
            
            // Create goal
            createGoal();
            
            // Add event listeners
            window.addEventListener('resize', onWindowResize);
            document.addEventListener('keydown', onKeyDown);
            document.addEventListener('keyup', onKeyUp);
            startBtn.addEventListener('click', startGame);
            restartBtn.addEventListener('click', restartGame);
            
            // Start clock
            clock = new THREE.Clock();
            
            // Start animation loop
            animate();
        }
        
        function createPlayer() {
            const geometry = new THREE.CapsuleGeometry(0.5, 1, 4, 8);
            const material = new THREE.MeshStandardMaterial({ 
                color: 0x3498db,
                roughness: 0.7,
                metalness: 0.2
            });
            player = new THREE.Mesh(geometry, material);
            player.castShadow = true;
            player.position.set(0, 2, 0);
            scene.add(player);
            
            // Add player camera offset
            const playerCameraOffset = new THREE.Group();
            playerCameraOffset.position.set(0, 1.5, 0);
            player.add(playerCameraOffset);
            camera.position.set(0, 0, 5);
            playerCameraOffset.add(camera);
        }
        
        function createPlatforms() {
            // Main starting platform
            const platformGeometry = new THREE.BoxGeometry(10, 0.5, 10);
            const platformMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x8B4513,
                roughness: 0.8,
                metalness: 0.1
            });
            
            const mainPlatform = new THREE.Mesh(platformGeometry, platformMaterial);
            mainPlatform.position.set(0, 0, 0);
            mainPlatform.receiveShadow = true;
            mainPlatform.castShadow = true;
            scene.add(mainPlatform);
            platforms.push(mainPlatform);
            
            // Create additional platforms
            const platformPositions = [
                { x: 12, y: 2, z: 0, width: 8, depth: 4 },
                { x: 8, y: 4, z: 8, width: 6, depth: 6 },
                { x: -10, y: 3, z: 5, width: 8, depth: 4 },
                { x: -5, y: 6, z: -8, width: 10, depth: 4 },
                { x: 10, y: 8, z: -5, width: 6, depth: 8 }
            ];
            
            platformPositions.forEach(pos => {
                const geometry = new THREE.BoxGeometry(pos.width, 0.5, pos.depth);
                const platform = new THREE.Mesh(geometry, platformMaterial);
                platform.position.set(pos.x, pos.y, pos.z);
                platform.receiveShadow = true;
                platform.castShadow = true;
                scene.add(platform);
                platforms.push(platform);
            });
            
            // Add some floating platforms
            for (let i = 0; i < 5; i++) {
                const size = 3 + Math.random() * 3;
                const platform = new THREE.Mesh(
                    new THREE.BoxGeometry(size, 0.3, size),
                    platformMaterial
                );
                platform.position.set(
                    -20 + Math.random() * 40,
                    4 + Math.random() * 10,
                    -20 + Math.random() * 40
                );
                platform.receiveShadow = true;
                platform.castShadow = true;
                scene.add(platform);
                platforms.push(platform);
            }
        }
        
        function createCoins() {
            const coinGeometry = new THREE.CylinderGeometry(0.5, 0.5, 0.1, 32);
            const coinMaterial = new THREE.MeshStandardMaterial({ 
                color: 0xFFD700,
                roughness: 0.1,
                metalness: 1.0
            });
            
            // Create coins on platforms
            platforms.forEach(platform => {
                const platformWidth = platform.geometry.parameters.width;
                const platformDepth = platform.geometry.parameters.depth;
                const platformHeight = platform.geometry.parameters.height;
                
                // Add 1-3 coins per platform
                const coinCount = 1 + Math.floor(Math.random() * 3);
                
                for (let i = 0; i < coinCount; i++) {
                    const coin = new THREE.Mesh(coinGeometry, coinMaterial);
                    
                    // Position coin on top of the platform
                    coin.position.set(
                        platform.position.x + (Math.random() - 0.5) * (platformWidth - 1),
                        platform.position.y + platformHeight / 2 + 0.6,
                        platform.position.z + (Math.random() - 0.5) * (platformDepth - 1)
                    );
                    
                    coin.rotation.x = Math.PI / 2;
                    coin.castShadow = true;
                    coin.userData = { value: 10, spinSpeed: 2 + Math.random() * 3 };
                    scene.add(coin);
                    coins.push(coin);
                }
            });
        }
        
        function createObstacles() {
            const obstacleMaterial = new THREE.MeshStandardMaterial({ 
                color: 0xff0000,
                roughness: 0.5,
                metalness: 0.5
            });
            
            // Create some moving obstacles
            for (let i = 0; i < 5; i++) {
                const height = 1 + Math.random() * 2;
                const obstacle = new THREE.Mesh(
                    new THREE.CylinderGeometry(0.5, 0.5, height, 8),
                    obstacleMaterial
                );
                
                // Position between platforms
                const platform1 = platforms[Math.floor(Math.random() * platforms.length)];
                const platform2 = platforms[Math.floor(Math.random() * platforms.length)];
                
                obstacle.position.set(
                    (platform1.position.x + platform2.position.x) / 2,
                    (platform1.position.y + platform2.position.y) / 2,
                    (platform1.position.z + platform2.position.z) / 2
                );
                
                obstacle.castShadow = true;
                obstacle.userData = {
                    speed: 0.5 + Math.random(),
                    direction: new THREE.Vector3(
                        Math.random() - 0.5,
                        0,
                        Math.random() - 0.5
                    ).normalize(),
                    distance: 3 + Math.random() * 5
                };
                
                scene.add(obstacle);
                obstacles.push(obstacle);
            }
            
            // Create some spinning blades
            for (let i = 0; i < 3; i++) {
                const blade = new THREE.Mesh(
                    new THREE.BoxGeometry(3, 0.1, 0.5),
                    new THREE.MeshStandardMaterial({ 
                        color: 0x888888,
                        roughness: 0.3,
                        metalness: 0.8
                    })
                );
                
                const platform = platforms[3 + i];
                blade.position.set(
                    platform.position.x,
                    platform.position.y + 2,
                    platform.position.z
                );
                
                blade.castShadow = true;
                blade.userData = { spinSpeed: 5 + Math.random() * 3 };
                scene.add(blade);
                obstacles.push(blade);
            }
        }
        
        function createGoal() {
            // Create flag pole
            const poleGeometry = new THREE.CylinderGeometry(0.1, 0.1, 3, 8);
            const poleMaterial = new THREE.MeshStandardMaterial({ color: 0xffffff });
            const pole = new THREE.Mesh(poleGeometry, poleMaterial);
            pole.position.set(15, 1.5, 15);
            pole.castShadow = true;
            scene.add(pole);
            
            // Create flag
            const flagGeometry = new THREE.PlaneGeometry(1.5, 1);
            const flagMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x00ff00,
                side: THREE.DoubleSide
            });
            const flag = new THREE.Mesh(flagGeometry, flagMaterial);
            flag.position.set(15.8, 2.5, 15);
            flag.rotation.y = Math.PI / 2;
            flag.castShadow = true;
            scene.add(flag);
            
            // Create base platform for goal
            const baseGeometry = new THREE.BoxGeometry(3, 0.5, 3);
            const baseMaterial = new THREE.MeshStandardMaterial({ color: 0x8B4513 });
            const base = new THREE.Mesh(baseGeometry, baseMaterial);
            base.position.set(15, 0, 15);
            base.receiveShadow = true;
            scene.add(base);
            
            goal = {
                pole: pole,
                flag: flag,
                base: base,
                position: new THREE.Vector3(15, 0, 15)
            };
        }
        
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
        
        function onKeyDown(event) {
            if (!gameRunning) return;
            
            switch (event.code) {
                case 'ArrowUp':
                case 'KeyW':
                    moveForward = true;
                    break;
                case 'ArrowDown':
                case 'KeyS':
                    moveBackward = true;
                    break;
                case 'ArrowLeft':
                case 'KeyA':
                    moveLeft = true;
                    break;
                case 'ArrowRight':
                case 'KeyD':
                    moveRight = true;
                    break;
                case 'Space':
                    if (canJump) {
                        playerVelocity.y = 8;
                        canJump = false;
                    }
                    break;
            }
        }
        
        function onKeyUp(event) {
            switch (event.code) {
                case 'ArrowUp':
                case 'KeyW':
                    moveForward = false;
                    break;
                case 'ArrowDown':
                case 'KeyS':
                    moveBackward = false;
                    break;
                case 'ArrowLeft':
                case 'KeyA':
                    moveLeft = false;
                    break;
                case 'ArrowRight':
                case 'KeyD':
                    moveRight = false;
                    break;
            }
        }
        
        function startGame() {
            startScreen.style.display = 'none';
            gameRunning = true;
            gameOver = false;
            score = 0;
            coinsCollected = 0;
            gameTime = 0;
            playerHealth = 100;
            goalReached = false;
            
            // Reset player position
            player.position.set(0, 2, 0);
            player.rotation.set(0, 0, 0);
            playerVelocity.set(0, 0, 0);
            
            // Reset camera
            camera.position.set(0, 5, 10);
            camera.lookAt(0, 0, 0);
            
            updateUI();
        }
        
        function restartGame() {
            gameOverScreen.style.display = 'none';
            startGame();
        }
        
        function updateUI() {
            scoreDisplay.textContent = `Score: ${score}`;
            coinsDisplay.textContent = `Coins: ${coinsCollected}`;
            healthFill.style.width = `${playerHealth}%`;
            timerDisplay.textContent = `Time: ${Math.floor(gameTime)}`;
        }
        
        function checkCollisions() {
            // Check coin collisions
            for (let i = coins.length - 1; i >= 0; i--) {
                const coin = coins[i];
                const distance = player.position.distanceTo(coin.position);
                
                if (distance < 1.5) {
                    // Collect coin
                    score += coin.userData.value;
                    coinsCollected++;
                    scene.remove(coin);
                    coins.splice(i, 1);
                    
                    // Play sound (would need Howler.js or similar for actual sound)
                    console.log("Coin collected!");
                    
                    updateUI();
                }
            }
            
            // Check obstacle collisions
            for (const obstacle of obstacles) {
                const distance = player.position.distanceTo(obstacle.position);
                const obstacleRadius = obstacle.geometry.parameters.radius || 
                                      obstacle.geometry.parameters.width / 2;
                
                if (distance < 1 + obstacleRadius) {
                    // Take damage
                    playerHealth -= 1;
                    updateUI();
                    
                    // Knockback effect
                    const knockbackDirection = new THREE.Vector3().subVectors(
                        player.position, obstacle.position
                    ).normalize();
                    
                    playerVelocity.add(knockbackDirection.multiplyScalar(5));
                    playerVelocity.y = 5;
                    
                    // Check if player died
                    if (playerHealth <= 0) {
                        endGame(false);
                    }
                }
            }
            
            // Check goal collision
            if (!goalReached) {
                const distance = player.position.distanceTo(goal.position);
                if (distance < 2) {
                    goalReached = true;
                    endGame(true);
                }
            }
        }
        
        function endGame(victory) {
            gameRunning = false;
            gameOver = true;
            
            finalScore.textContent = score;
            finalCoins.textContent = coinsCollected;
            
            if (victory) {
                document.querySelector('#game-over h1').textContent = 'VICTORY!';
                document.querySelector('#game-over h1').className = 'text-5xl font-bold mb-6 text-transparent bg-clip-text bg-gradient-to-r from-green-500 to-yellow-500';
            } else {
                document.querySelector('#game-over h1').textContent = 'GAME OVER';
                document.querySelector('#game-over h1').className = 'text-5xl font-bold mb-6 text-transparent bg-clip-text bg-gradient-to-r from-red-500 to-yellow-500';
            }
            
            gameOverScreen.style.display = 'flex';
        }
        
        function animate() {
            requestAnimationFrame(animate);
            
            const delta = clock.getDelta();
            
            if (gameRunning && !gameOver) {
                // Update game time
                gameTime += delta;
                timerDisplay.textContent = `Time: ${Math.floor(gameTime)}`;
                
                // Apply gravity
                playerVelocity.y -= 15 * delta;
                
                // Handle player movement
                playerDirection.z = Number(moveForward) - Number(moveBackward);
                playerDirection.x = Number(moveRight) - Number(moveLeft);
                playerDirection.normalize();
                
                // Move player
                const moveSpeed = 10 * delta;
                player.position.x += playerDirection.x * moveSpeed;
                player.position.z += playerDirection.z * moveSpeed;
                player.position.y += playerVelocity.y * delta;
                
                // Check platform collisions (simple ground check)
                let onGround = false;
                for (const platform of platforms) {
                    const platformTop = platform.position.y + platform.geometry.parameters.height / 2;
                    const platformBottom = platform.position.y - platform.geometry.parameters.height / 2;
                    
                    if (player.position.y - 1 <= platformTop && 
                        player.position.y - 1 >= platformBottom &&
                        Math.abs(player.position.x - platform.position.x) < platform.geometry.parameters.width / 2 &&
                        Math.abs(player.position.z - platform.position.z) < platform.geometry.parameters.depth / 2) {
                        
                        player.position.y = platformTop + 1;
                        playerVelocity.y = 0;
                        canJump = true;
                        onGround = true;
                    }
                }
                
                // If not on any platform and below ground level, player fell off
                if (player.position.y < -10) {
                    playerHealth = 0;
                    updateUI();
                    endGame(false);
                }
                
                // Update obstacles
                for (const obstacle of obstacles) {
                    // Move moving obstacles
                    if (obstacle.userData.direction) {
                        obstacle.position.add(
                            obstacle.userData.direction.clone().multiplyScalar(
                                obstacle.userData.speed * delta
                            )
                        );
                        
                        // Reverse direction if reached max distance
                        if (obstacle.position.distanceTo(obstacle.userData.initialPos || obstacle.position) > 
                            obstacle.userData.distance) {
                            obstacle.userData.direction.negate();
                            obstacle.userData.initialPos = obstacle.position.clone();
                        }
                    }
                    
                    // Spin spinning obstacles
                    if (obstacle.userData.spinSpeed) {
                        obstacle.rotation.y += obstacle.userData.spinSpeed * delta;
                    }
                }
                
                // Spin coins
                for (const coin of coins) {
                    coin.rotation.y += coin.userData.spinSpeed * delta;
                }
                
                // Check collisions
                checkCollisions();
            }
            
            // Update controls
            controls.update();
            
            // Render scene
            renderer.render(scene, camera);
        }
        
        // Start the game
        init();
    </script>
</body>
</html>
